Domain Cinetech {
  Subdomain CinemaCore
  Subdomain Pagamento
  Subdomain Fidelidade
  Subdomain PromocaoDesconto
  Subdomain Avaliacao
  Subdomain Usuario
  Subdomain ReservaSala
}

ContextMap {
  contains CinemaCore
  contains Pagamento
  contains Usuario
  contains Fidelidade
  contains PromocaoDesconto
  contains Avaliacao
  contains ReservaSala

  CinemaCore Shared-Kernel Usuario
  Pagamento Shared-Kernel Usuario
  Fidelidade Shared-Kernel Usuario
  PromocaoDesconto Shared-Kernel Usuario
  Avaliacao Shared-Kernel Usuario
  ReservaSala Shared-Kernel Usuario
}

BoundedContext CinemaCore implements CinemaCore {
  Aggregate Filme {
    Entity Filme {
      aggregateRoot
      -FilmeId id
      String titulo
      String genero
      String sinopse
      String classificacao
    }
    Service FilmeService {
      operations = ["criarFilme()", "listarFilmes()", "atualizarFilme()", "removerFilme()"]
    }
    Repository FilmeRepository {
      operations = ["save(Filme)", "findById(FilmeId)", "findAll()"]
    }
  }

  Aggregate Sessao {
    Entity Sessao {
      aggregateRoot
      -SessaoId id
      -FilmeId filme
      -SalaId sala
      Date horario
      double preco
    }
    Service SessaoService {
      operations = ["criarSessao()", "buscarPorFilme(FilmeId)", "cancelarSessao()"]
    }
    Repository SessaoRepository {
      operations = ["save(Sessao)", "findByFilmeId(FilmeId)", "findAll()"]
    }
  }

  Aggregate Assento {
    Entity Assento {
      aggregateRoot
      -AssentoId id
      int numero
      boolean disponivel
    }
    Service AssentoService {
      operations = ["marcarIndisponivel(AssentoId)", "listarAssentosDisponiveis()"]
    }
    Repository AssentoRepository {
      operations = ["save(Assento)", "findById(AssentoId)", "findAllDisponiveis()"]
    }
  }
}

BoundedContext Pagamento implements Pagamento {
  Aggregate Credito {
    Entity Credito {
      aggregateRoot
      -CreditoId id
      -ClienteId cliente
      double valor
      String status
    }
    Service CreditoService {
      operations = ["adicionarCredito()", "consultarCredito(ClienteId)", "atualizarStatusCredito()"]
    }
    Repository CreditoRepository {
      operations = ["save(Credito)", "findByClienteId(ClienteId)"]
    }
  }
}

BoundedContext Usuario implements Usuario {
  Aggregate Cliente {
    Entity Cliente {
      aggregateRoot
      -ClienteId id
      String nome
      String email
    }
    Repository ClienteRepository {
      operations = ["save(Cliente)", "findById(ClienteId)", "findByEmail(String)"]
    }
  }
}

BoundedContext Fidelidade implements Fidelidade {
  Aggregate ClienteFidelidade {
    Entity ClienteFidelidade {
      aggregateRoot
      -ClienteId id
      int pontos
    }
  }
}

BoundedContext PromocaoDesconto implements PromocaoDesconto {
  Aggregate Promocao {
    Entity Promocao {
      aggregateRoot
      -PromocaoId id
      String descricao
      double percentualDesconto
    }
    ValueObject PromocaoId {
      int id
    }
  }
}

BoundedContext Avaliacao implements Avaliacao {
  Aggregate AvaliacaoFilme {
    Entity AvaliacaoFilme {
      aggregateRoot
      -AvaliacaoId id
      -FilmeId filme
      -ClienteId cliente
      int nota
      String comentario nullable
    }
    ValueObject AvaliacaoId {
      int id
    }
  }
}

BoundedContext ReservaSala implements ReservaSala {
  Aggregate ReservaEvento {
    Entity ReservaEvento {
      aggregateRoot
      -ReservaId id
      -SalaId sala
      -ClienteId cliente
      Date data
    }
    ValueObject ReservaId {
      int id
    }
  }
}
