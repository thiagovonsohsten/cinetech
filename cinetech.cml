ContextMap {
  contains CinemaCore
  contains Pagamento
  contains Fidelidade
  contains PromocaoDesconto
  contains Avaliacao
  contains Usuario
  contains ReservaSala

  CinemaCore -> Usuario {
    type = CONFORMIST
  }

  CinemaCore -> Pagamento {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> PromocaoDesconto {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> Fidelidade {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> Avaliacao {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> ReservaSala {
    type = CUSTOMER_SUPPLIER
  }
}

Domain Cinetech {
  Subdomain Cinema
  Subdomain Pagamento
  Subdomain Fidelidade
  Subdomain PromocaoDesconto
  Subdomain Avaliacao
  Subdomain Usuario
  Subdomain ReservaSala
}

BoundedContext CinemaCore implements Cinema {
  type = CORE
  implementationTechnology = "Spring Boot + JPA"

  responsibilities = [
    "Gerenciar filmes, sessões e salas",
    "Controlar assentos e disponibilidade",
    "Processar vendas de ingressos"
  ]

  Aggregate Filme {
    Entity Filme {
      aggregateRoot

      -FilmeId id
      String titulo
      String sinopse
      Duration duracao
    }

    ValueObject FilmeId {
      UUID id
    }
  }

  Aggregate Sessao {
    Entity Sessao {
      aggregateRoot

      -SessaoId id
      -FilmeId filme
      -SalaId sala
      LocalDateTime horario
      int assentosDisponiveis
    }

    ValueObject SessaoId {
      UUID id
    }

    ValueObject SalaId {
      UUID id
    }
  }
}

BoundedContext Pagamento implements Pagamento {
  type = SUPPORTING
  implementationTechnology = "Gateway de Pagamento Externo"

  responsibilities = [
    "Gerenciar transações de pagamento",
    "Integrar com métodos como Pix, crédito e débito"
  ]
}

BoundedContext Fidelidade implements Fidelidade {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Gerenciar acúmulo de créditos e resgates",
    "Expirar pontos inativos após 6 meses"
  ]
}

BoundedContext PromocaoDesconto implements PromocaoDesconto {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Aplicar regras de desconto para PCDs, estudantes e idosos",
    "Gerenciar promoções por horário ou sala"
  ]
}

BoundedContext Avaliacao implements Avaliacao {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Permitir avaliação de filmes por clientes autenticados",
    "Filtrar comentários ofensivos",
    "Interagir com exibição baseada em nota média"
  ]
}

BoundedContext Usuario implements Usuario {
  type = GENERIC
  implementationTechnology = "Spring Security / OAuth"

  responsibilities = [
    "Gerenciar dados de clientes e administradores",
    "Validar perfil (cliente comum, estudante, idoso, PCD, admin)"
  ]
}

BoundedContext ReservaSala implements ReservaSala {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Gerenciar reservas de salas exclusivas para eventos",
    "Exigir antecedência mínima e pagamento antecipado"
  ]
}
