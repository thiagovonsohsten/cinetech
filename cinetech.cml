ContextMap {
  contains CinemaCore
  contains Pagamento
  contains Fidelidade
  contains PromocaoDesconto
  contains Avaliacao
  contains Usuario
  contains ReservaSala

  CinemaCore -> Usuario {
    type = CONFORMIST
  }

  CinemaCore -> Pagamento {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> PromocaoDesconto {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> Fidelidade {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> Avaliacao {
    type = CUSTOMER_SUPPLIER
  }

  CinemaCore -> ReservaSala {
    type = CUSTOMER_SUPPLIER
  }
}

Domain Cinetech {
  Subdomain Cinema
  Subdomain Pagamento
  Subdomain Fidelidade
  Subdomain PromocaoDesconto
  Subdomain Avaliacao
  Subdomain Usuario
  Subdomain ReservaSala
}

BoundedContext CinemaCore implements Cinema {
  type = CORE
  implementationTechnology = "Spring Boot + JPA"

  responsibilities = [
    "Gerenciar filmes, sessões e salas",
    "Controlar assentos e disponibilidade",
    "Processar vendas e reservas de ingressos"
  ]

  Aggregate Filme {
    Entity Filme {
      aggregateRoot
      -FilmeId id
      String titulo
      String sinopse
      Duration duracao
      LocalDate dataLancamento
    }

    ValueObject FilmeId {
      UUID id
    }
  }

  Aggregate Sala {
    Entity Sala {
      aggregateRoot
      -SalaId id
      String nome
      Boolean is3D
      int capacidade
    }

    ValueObject SalaId {
      UUID id
    }
  }

  Aggregate Sessao {
    Entity Sessao {
      aggregateRoot
      -SessaoId id
      -FilmeId filme
      -SalaId sala
      LocalDateTime horario
      StatusSessao status
    }

    Enum StatusSessao {
      ATIVA, CANCELADA, ENCERRADA
    }

    ValueObject SessaoId {
      UUID id
    }
  }

  Aggregate Assento {
    Entity Assento {
      aggregateRoot
      -AssentoId id
      -SalaId sala
      TipoAssento tipo
      StatusAssento status
    }

    Enum TipoAssento {
      PADRAO, PREMIUM, PCD
    }

    Enum StatusAssento {
      LIVRE, RESERVADO, OCUPADO
    }

    ValueObject AssentoId {
      UUID id
    }
  }

  Aggregate Reserva {
    Entity Reserva {
      aggregateRoot
      -ReservaId id
      -SessaoId sessao
      -AssentoId assento
      -UsuarioId cliente
      LocalDateTime dataHora
      Boolean cancelada
    }

    ValueObject ReservaId {
      UUID id
    }
  }

  Aggregate Credito {
    Entity Credito {
      aggregateRoot
      -CreditoId id
      -UsuarioId cliente
      BigDecimal valor
      LocalDate dataExpiracao
    }

    ValueObject CreditoId {
      UUID id
    }
  }
}

BoundedContext Pagamento implements Pagamento {
  type = SUPPORTING
  implementationTechnology = "Gateway de Pagamento Externo"

  responsibilities = [
    "Gerenciar transações de pagamento",
    "Integrar com métodos como Pix, crédito e débito"
  ]

  Aggregate Transacao {
    Entity Transacao {
      aggregateRoot
      -TransacaoId id
      -ReservaId reserva
      MetodoPagamento metodo
      BigDecimal valor
      StatusTransacao status
    }

    Enum MetodoPagamento {
      PIX, CREDITO, DEBITO
    }

    Enum StatusTransacao {
      PENDENTE, APROVADA, NEGADA
    }

    ValueObject TransacaoId {
      UUID id
    }
  }
}

BoundedContext Fidelidade implements Fidelidade {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Gerenciar acúmulo de créditos e resgates",
    "Expirar pontos inativos após 6 meses"
  ]

  Aggregate Pontuacao {
    Entity Pontuacao {
      aggregateRoot
      -UsuarioId cliente
      int pontos
      LocalDate ultimaAtualizacao
    }
  }
}

BoundedContext PromocaoDesconto implements PromocaoDesconto {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Aplicar regras de desconto para PCDs, estudantes e idosos",
    "Gerenciar promoções por horário ou sala"
  ]

  Aggregate RegraDesconto {
    Entity RegraDesconto {
      aggregateRoot
      String publicoAlvo
      BigDecimal percentual
      LocalTime horarioInicio
      LocalTime horarioFim
    }
  }
}

BoundedContext Avaliacao implements Avaliacao {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Permitir avaliação de filmes por clientes autenticados",
    "Filtrar comentários ofensivos",
    "Interagir com exibição baseada em nota média"
  ]

  Aggregate AvaliacaoFilme {
    Entity AvaliacaoFilme {
      aggregateRoot
      -FilmeId filme
      -UsuarioId autor
      int nota
      String comentario
      LocalDateTime data
    }
  }
}

BoundedContext Usuario implements Usuario {
  type = GENERIC
  implementationTechnology = "Spring Security / OAuth"

  responsibilities = [
    "Gerenciar dados de clientes e administradores",
    "Validar perfil (cliente comum, estudante, idoso, PCD, admin)"
  ]

  Aggregate Usuario {
    Entity Usuario {
      aggregateRoot
      -UsuarioId id
      String nome
      String email
      Perfil perfil
    }

    Enum Perfil {
      CLIENTE, ESTUDANTE, IDOSO, PCD, ADMIN
    }

    ValueObject UsuarioId {
      UUID id
    }
  }
}

BoundedContext ReservaSala implements ReservaSala {
  type = SUPPORTING
  implementationTechnology = "Spring Boot"

  responsibilities = [
    "Gerenciar reservas de salas exclusivas para eventos",
    "Exigir antecedência mínima e pagamento antecipado"
  ]

  Aggregate EventoPrivado {
    Entity EventoPrivado {
      aggregateRoot
      -ReservaId id
      -SalaId sala
      LocalDateTime dataHora
      -UsuarioId organizador
      String finalidade
      boolean pago
    }
  }
}
